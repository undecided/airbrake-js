// Generated by CoffeeScript 1.7.1
(function() {
  var loadAirbrakeNotifier, setupJQ, top_level;

  top_level = typeof window !== 'undefined' ? window : global;

  top_level.Airbrake || (top_level.Airbrake = []);

  Airbrake.js_download_url || (Airbrake.js_download_url = 'https://ssljscdn.airbrake.io/0.3/airbrake.min.js');

  Airbrake.catcher_domain || (Airbrake.catcher_domain = 'https://api.airbrake.io');

  Airbrake.wrap = function(fn) {
    var airbrakeWrapper;
    airbrakeWrapper = function() {
      var args, exc;
      try {
        return fn.apply(this, arguments);
      } catch (_error) {
        exc = _error;
        args = Array.prototype.slice.call(arguments);
        return Airbrake.push({
          error: exc,
          params: {
            "arguments": args
          }
        });
      }
    };
    if (fn.guid) {
      airbrakeWrapper.guid = fn.guid;
    }
    return airbrakeWrapper;
  };

  Airbrake.onload = function() {
    return Airbrake.addReporter(Airbrake.consoleReporter);
  };

  window.onerror = function(message, file, line, column, error) {
    if (error) {
      return Airbrake.push({
        error: error
      });
    } else {
      return Airbrake.push({
        error: {
          message: message,
          fileName: file,
          lineNumber: line,
          columnNumber: column || 0
        }
      });
    }
  };

  loadAirbrakeNotifier = function() {
    var script, sibling;
    script = document.createElement('script');
    sibling = document.getElementsByTagName('script')[0];
    script.src = Airbrake.js_download_url;
    script.async = true;
    return sibling.parentNode.insertBefore(script, sibling);
  };

  setupJQ = function() {
    var jqCallbacks, jqEventAdd, jqReady;
    jqEventAdd = jQuery.event.add;
    jQuery.event.add = function(elem, types, handler, data, selector) {
      if (handler.handler) {
        if (!handler.handler.guid) {
          handler.handler.guid = jQuery.guid++;
        }
        handler.handler = Airbrake.wrap(handler.handler);
      } else {
        if (!handler.guid) {
          handler.guid = jQuery.guid++;
        }
        handler = Airbrake.wrap(handler);
      }
      return jqEventAdd(elem, types, handler, data, selector);
    };
    jqCallbacks = jQuery.Callbacks;
    jQuery.Callbacks = function(options) {
      var cb, cbAdd;
      cb = jqCallbacks(options);
      cbAdd = cb.add;
      cb.add = function() {
        var fns;
        fns = arguments;
        jQuery.each(fns, function(i, fn) {
          if (jQuery.isFunction(fn)) {
            return fns[i] = Airbrake.wrap(fn);
          }
        });
        return cbAdd.apply(this, fns);
      };
      return cb;
    };
    jqReady = jQuery.fn.ready;
    return jQuery.fn.ready = function(fn) {
      return jqReady(Airbrake.wrap(fn));
    };
  };

  if (window.addEventListener) {
    window.addEventListener('load', loadAirbrakeNotifier, false);
  } else {
    window.attachEvent('onload', loadAirbrakeNotifier);
  }

  if (window.jQuery) {
    setupJQ();
  }

}).call(this);
